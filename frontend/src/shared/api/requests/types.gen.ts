// This file is auto-generated by @hey-api/openapi-ts

export type BaseChatSchema = {
    id: string;
    title: string;
    created_at: string;
    group_id: string;
};

export type BaseRoleGroupSchema = {
    id: number;
    title: string;
    permissions: Array<RolePermissionsEnum>;
    group_id: string;
    created_at: string;
};

export type Body_auth_db_cookie_login_api_auth_jwt_login_post = {
    grant_type?: string | null;
    username: string;
    password: string;
    scope?: string;
    client_id?: string | null;
    client_secret?: string | null;
};

export type Body_reset_forgot_password_api_auth_forgot_password_post = {
    email: string;
};

export type Body_reset_reset_password_api_auth_reset_password_post = {
    token: string;
    password: string;
};

export type Body_upload_avatar_api_groups_avatar__group_id__post = {
    image: (Blob | File);
};

export type Body_upload_avatar_api_users_avatar__group_id__post = {
    image: (Blob | File);
};

export type Body_upload_panorama_api_groups_panorama__group_id__post = {
    image: (Blob | File);
};

export type Body_verify_request_token_api_auth_request_verify_token_post = {
    email: string;
};

export type Body_verify_verify_api_auth_verify_post = {
    token: string;
};

export type CreateChatSchema = {
    title: string;
};

export type CreateGroupSchema = {
    title: string;
    description: string | null;
};

export type CreateMessageSchema = {
    /**
     * Message must be less than 2000 characters
     */
    message: string;
    user_id?: string | null;
    to_chat_id: string;
};

export type CreateRoleGroupSchema = {
    title: string;
    group_id: string;
};

export type ErrorModel = {
    detail: string | {
    [key: string]: (string);
};
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type ReadChatSchema = {
    id: string;
    title: string;
    created_at: string;
    group_id: string;
};

export type ReadGroupSchema = {
    id: string;
    title: string;
    description: string | null;
    avatar_path: string | null;
    panorama_path: string | null;
    created_at: string;
    chats?: Array<BaseChatSchema>;
    roles?: Array<BaseRoleGroupSchema>;
};

export type ReadMessageSchema = {
    id: string;
    id_in_chat: number;
    /**
     * Message must be less than 2000 characters
     */
    message: string;
    user_id: string;
    to_chat_id: string;
    created_at: string;
    author?: string | null;
};

export type ReadRoleGroupSchema = {
    id: number;
    title: string;
    permissions: Array<RolePermissionsEnum>;
    group_id: string;
    created_at: string;
};

export type RolePermissionsEnum = 'can_all' | 'can_edit_roles' | 'can_set_avatar' | 'can_set_panorama' | 'can_control_chats' | 'can_send_message';

export type UpdateChatSchema = {
    title?: string | null;
};

export type UpdateGroupSchema = {
    title?: string | null;
    description?: string | null;
};

export type UpdateMessageSchema = {
    /**
     * Message must be less than 2000 characters
     */
    message: string | null;
};

export type UpdateRoleGroupSchema = {
    title?: string | null;
};

export type UserCreate = {
    name: string;
    account_name: string;
    email: string;
    password: string;
    is_active?: boolean | null;
    is_superuser?: boolean | null;
    is_verified?: boolean | null;
};

export type UserRead = {
    id: string;
    name: string;
    account_name: string;
    created_at: string;
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    is_verified?: boolean;
};

export type UserUpdate = {
    name: string | null;
    password?: string | null;
    email?: string | null;
    is_active?: boolean | null;
    is_superuser?: boolean | null;
    is_verified?: boolean | null;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type GetApiUsersAvatarByGroupIdData = {
    groupId: string;
};

export type GetApiUsersAvatarByGroupIdResponse = unknown;

export type PostApiUsersAvatarByGroupIdData = {
    formData: Body_upload_avatar_api_users_avatar__group_id__post;
    groupId: string;
};

export type PostApiUsersAvatarByGroupIdResponse = unknown;

export type GetApiUsersMeResponse = UserRead;

export type PatchApiUsersMeData = {
    requestBody: UserUpdate;
};

export type PatchApiUsersMeResponse = UserRead;

export type GetApiUsersByIdData = {
    id: string;
};

export type GetApiUsersByIdResponse = UserRead;

export type PatchApiUsersByIdData = {
    id: string;
    requestBody: UserUpdate;
};

export type PatchApiUsersByIdResponse = UserRead;

export type DeleteApiUsersByIdData = {
    id: string;
};

export type DeleteApiUsersByIdResponse = void;

export type PostApiAuthJwtLoginData = {
    formData: Body_auth_db_cookie_login_api_auth_jwt_login_post;
};

export type PostApiAuthJwtLoginResponse = unknown | void;

export type PostApiAuthJwtLogoutResponse = unknown | void;

export type PostApiAuthRegisterData = {
    requestBody: UserCreate;
};

export type PostApiAuthRegisterResponse = UserRead;

export type PostApiAuthForgotPasswordData = {
    requestBody: Body_reset_forgot_password_api_auth_forgot_password_post;
};

export type PostApiAuthForgotPasswordResponse = unknown;

export type PostApiAuthResetPasswordData = {
    requestBody: Body_reset_reset_password_api_auth_reset_password_post;
};

export type PostApiAuthResetPasswordResponse = unknown;

export type PostApiAuthRequestVerifyTokenData = {
    requestBody: Body_verify_request_token_api_auth_request_verify_token_post;
};

export type PostApiAuthRequestVerifyTokenResponse = unknown;

export type PostApiAuthVerifyData = {
    requestBody: Body_verify_verify_api_auth_verify_post;
};

export type PostApiAuthVerifyResponse = UserRead;

export type GetApiAuthAccessTokenResponse = unknown;

export type GetApiAuthenticatedRouteResponse = unknown;

export type GetApiResponse = unknown;

export type GetApiGroupsAvatarByGroupIdData = {
    groupId: string;
};

export type GetApiGroupsAvatarByGroupIdResponse = unknown;

export type PostApiGroupsAvatarByGroupIdData = {
    formData: Body_upload_avatar_api_groups_avatar__group_id__post;
    groupId: string;
};

export type PostApiGroupsAvatarByGroupIdResponse = unknown;

export type GetApiGroupsPanoramaByGroupIdData = {
    groupId: string;
};

export type GetApiGroupsPanoramaByGroupIdResponse = unknown;

export type PostApiGroupsPanoramaByGroupIdData = {
    formData: Body_upload_panorama_api_groups_panorama__group_id__post;
    groupId: string;
};

export type PostApiGroupsPanoramaByGroupIdResponse = unknown;

export type GetApiGroupsInviteByGroupIdData = {
    groupId: string;
};

export type GetApiGroupsInviteByGroupIdResponse = unknown;

export type PostApiGroupsInviteData = {
    requestBody: string;
};

export type PostApiGroupsInviteResponse = unknown;

export type GetApiGroupsUserGroupsMeResponse = unknown;

export type GetApiGroupsUserGroupsByUserIdData = {
    userId: string;
};

export type GetApiGroupsUserGroupsByUserIdResponse = unknown;

export type GetApiGroupsByGroupIdData = {
    groupId: string;
};

export type GetApiGroupsByGroupIdResponse = ReadGroupSchema;

export type PatchApiGroupsByGroupIdData = {
    groupId: string;
    requestBody: UpdateGroupSchema;
};

export type PatchApiGroupsByGroupIdResponse = unknown;

export type DeleteApiGroupsByGroupIdData = {
    groupId: string;
};

export type DeleteApiGroupsByGroupIdResponse = unknown;

export type PostApiGroupsData = {
    requestBody: CreateGroupSchema;
};

export type PostApiGroupsResponse = unknown;

export type GetApiChatsChatsMeResponse = unknown;

export type GetApiChatsGroupChatsByGroupIdData = {
    groupId: string;
};

export type GetApiChatsGroupChatsByGroupIdResponse = unknown;

export type GetApiChatsByChatUuidData = {
    chatUuid: string;
};

export type GetApiChatsByChatUuidResponse = ReadChatSchema;

export type PatchApiChatsByChatUuidData = {
    chatUuid: string;
    requestBody: UpdateChatSchema;
};

export type PatchApiChatsByChatUuidResponse = unknown;

export type DeleteApiChatsByChatUuidData = {
    chatUuid: string;
};

export type DeleteApiChatsByChatUuidResponse = unknown;

export type PostApiChatsByGroupIdData = {
    groupId: string;
    requestBody: CreateChatSchema;
};

export type PostApiChatsByGroupIdResponse = unknown;

export type GetApiRolesGroupByRoleGroupIdData = {
    roleGroupId: number;
};

export type GetApiRolesGroupByRoleGroupIdResponse = ReadRoleGroupSchema;

export type PatchApiRolesGroupByRoleGroupIdData = {
    requestBody: UpdateRoleGroupSchema;
    roleGroupId: number;
};

export type PatchApiRolesGroupByRoleGroupIdResponse = unknown;

export type DeleteApiRolesGroupByRoleGroupIdData = {
    roleGroupId: number;
};

export type DeleteApiRolesGroupByRoleGroupIdResponse = unknown;

export type PostApiRolesGroupData = {
    requestBody: CreateRoleGroupSchema;
};

export type PostApiRolesGroupResponse = unknown;

export type GetApiMessagesChatByChatIdData = {
    chatId: string;
};

export type GetApiMessagesChatByChatIdResponse = Array<ReadMessageSchema>;

export type GetApiMessagesByMessageIdData = {
    messageId: string;
};

export type GetApiMessagesByMessageIdResponse = ReadMessageSchema;

export type PatchApiMessagesByMessageIdData = {
    messageId: number;
    requestBody: UpdateMessageSchema;
};

export type PatchApiMessagesByMessageIdResponse = unknown;

export type DeleteApiMessagesByMessageIdData = {
    messageId: number;
};

export type DeleteApiMessagesByMessageIdResponse = unknown;

export type PostApiMessagesData = {
    requestBody: CreateMessageSchema;
};

export type PostApiMessagesResponse = unknown;

export type $OpenApiTs = {
    '/api/users/avatar/{group_id}': {
        get: {
            req: GetApiUsersAvatarByGroupIdData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        post: {
            req: PostApiUsersAvatarByGroupIdData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/users/me': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: UserRead;
                /**
                 * Missing token or inactive user.
                 */
                401: unknown;
            };
        };
        patch: {
            req: PatchApiUsersMeData;
            res: {
                /**
                 * Successful Response
                 */
                200: UserRead;
                /**
                 * Bad Request
                 */
                400: ErrorModel;
                /**
                 * Missing token or inactive user.
                 */
                401: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/users/{id}': {
        get: {
            req: GetApiUsersByIdData;
            res: {
                /**
                 * Successful Response
                 */
                200: UserRead;
                /**
                 * Missing token or inactive user.
                 */
                401: unknown;
                /**
                 * Not a superuser.
                 */
                403: unknown;
                /**
                 * The user does not exist.
                 */
                404: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        patch: {
            req: PatchApiUsersByIdData;
            res: {
                /**
                 * Successful Response
                 */
                200: UserRead;
                /**
                 * Bad Request
                 */
                400: ErrorModel;
                /**
                 * Missing token or inactive user.
                 */
                401: unknown;
                /**
                 * Not a superuser.
                 */
                403: unknown;
                /**
                 * The user does not exist.
                 */
                404: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeleteApiUsersByIdData;
            res: {
                /**
                 * Successful Response
                 */
                204: void;
                /**
                 * Missing token or inactive user.
                 */
                401: unknown;
                /**
                 * Not a superuser.
                 */
                403: unknown;
                /**
                 * The user does not exist.
                 */
                404: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/auth/jwt/login': {
        post: {
            req: PostApiAuthJwtLoginData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * No Content
                 */
                204: void;
                /**
                 * Bad Request
                 */
                400: ErrorModel;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/auth/jwt/logout': {
        post: {
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * No Content
                 */
                204: void;
                /**
                 * Missing token or inactive user.
                 */
                401: unknown;
            };
        };
    };
    '/api/auth/register': {
        post: {
            req: PostApiAuthRegisterData;
            res: {
                /**
                 * Successful Response
                 */
                201: UserRead;
                /**
                 * Bad Request
                 */
                400: ErrorModel;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/auth/forgot-password': {
        post: {
            req: PostApiAuthForgotPasswordData;
            res: {
                /**
                 * Successful Response
                 */
                202: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/auth/reset-password': {
        post: {
            req: PostApiAuthResetPasswordData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Bad Request
                 */
                400: ErrorModel;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/auth/request-verify-token': {
        post: {
            req: PostApiAuthRequestVerifyTokenData;
            res: {
                /**
                 * Successful Response
                 */
                202: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/auth/verify': {
        post: {
            req: PostApiAuthVerifyData;
            res: {
                /**
                 * Successful Response
                 */
                200: UserRead;
                /**
                 * Bad Request
                 */
                400: ErrorModel;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/auth/access_token': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
            };
        };
    };
    '/api/authenticated-route': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
            };
        };
    };
    '/api': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
            };
        };
    };
    '/api/groups/avatar/{group_id}': {
        get: {
            req: GetApiGroupsAvatarByGroupIdData;
            res: {
                /**
                 * Returns the avatar image
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        post: {
            req: PostApiGroupsAvatarByGroupIdData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/groups/panorama/{group_id}': {
        get: {
            req: GetApiGroupsPanoramaByGroupIdData;
            res: {
                /**
                 * Returns the panorama image
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        post: {
            req: PostApiGroupsPanoramaByGroupIdData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/groups/invite/{group_id}': {
        get: {
            req: GetApiGroupsInviteByGroupIdData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/groups/invite': {
        post: {
            req: PostApiGroupsInviteData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/groups/user_groups/me': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
            };
        };
    };
    '/api/groups/user_groups/{user_id}': {
        get: {
            req: GetApiGroupsUserGroupsByUserIdData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/groups/{group_id}': {
        get: {
            req: GetApiGroupsByGroupIdData;
            res: {
                /**
                 * Successful Response
                 */
                200: ReadGroupSchema;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        patch: {
            req: PatchApiGroupsByGroupIdData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeleteApiGroupsByGroupIdData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/groups/': {
        post: {
            req: PostApiGroupsData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/chats/chats/me': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
            };
        };
    };
    '/api/chats/group_chats/{group_id}': {
        get: {
            req: GetApiChatsGroupChatsByGroupIdData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/chats/{chat_uuid}': {
        get: {
            req: GetApiChatsByChatUuidData;
            res: {
                /**
                 * Successful Response
                 */
                200: ReadChatSchema;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        patch: {
            req: PatchApiChatsByChatUuidData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeleteApiChatsByChatUuidData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/chats/{group_id}': {
        post: {
            req: PostApiChatsByGroupIdData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/roles_group/{role_group_id}': {
        get: {
            req: GetApiRolesGroupByRoleGroupIdData;
            res: {
                /**
                 * Successful Response
                 */
                200: ReadRoleGroupSchema;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        patch: {
            req: PatchApiRolesGroupByRoleGroupIdData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeleteApiRolesGroupByRoleGroupIdData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/roles_group/': {
        post: {
            req: PostApiRolesGroupData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/messages/chat/{chat_id}': {
        get: {
            req: GetApiMessagesChatByChatIdData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<ReadMessageSchema>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/messages/{message_id}': {
        get: {
            req: GetApiMessagesByMessageIdData;
            res: {
                /**
                 * Successful Response
                 */
                200: ReadMessageSchema;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        patch: {
            req: PatchApiMessagesByMessageIdData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeleteApiMessagesByMessageIdData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/messages/': {
        post: {
            req: PostApiMessagesData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
};