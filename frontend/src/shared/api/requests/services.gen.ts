// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { PostApiAuthJwtLoginData, PostApiAuthJwtLoginResponse, PostApiAuthJwtLogoutResponse, PostApiAuthRegisterData, PostApiAuthRegisterResponse, PostApiAuthForgotPasswordData, PostApiAuthForgotPasswordResponse, PostApiAuthResetPasswordData, PostApiAuthResetPasswordResponse, PostApiAuthRequestVerifyTokenData, PostApiAuthRequestVerifyTokenResponse, PostApiAuthVerifyData, PostApiAuthVerifyResponse, GetApiAuthMeResponse, GetApiAuthMeAlterntiveResponse, PostApiAuthAccessTokenResponse, GetApiUsersMeResponse, PatchApiUsersMeData, PatchApiUsersMeResponse, GetApiUsersByIdData, GetApiUsersByIdResponse, PatchApiUsersByIdData, PatchApiUsersByIdResponse, DeleteApiUsersByIdData, DeleteApiUsersByIdResponse, GetApiUsersAvatarMeResponse, PostApiUsersAvatarMeData, PostApiUsersAvatarMeResponse, GetApiGroupsUserGroupsMeResponse, GetApiGroupsAvatarByGroupIdData, GetApiGroupsAvatarByGroupIdResponse, PostApiGroupsAvatarByGroupIdData, PostApiGroupsAvatarByGroupIdResponse, GetApiGroupsPanoramaByGroupIdData, GetApiGroupsPanoramaByGroupIdResponse, PostApiGroupsPanoramaByGroupIdData, PostApiGroupsPanoramaByGroupIdResponse, GetApiGroupsInviteByGroupIdData, GetApiGroupsInviteByGroupIdResponse, PostApiGroupsInviteData, PostApiGroupsInviteResponse, PostApiGroupsLeaveByGroupIdData, PostApiGroupsLeaveByGroupIdResponse, GetApiGroupsByGroupIdData, GetApiGroupsByGroupIdResponse, PatchApiGroupsByGroupIdData, PatchApiGroupsByGroupIdResponse, DeleteApiGroupsByGroupIdData, DeleteApiGroupsByGroupIdResponse, PostApiGroupsData, PostApiGroupsResponse, PatchApiGroupsTitleByGroupIdData, PatchApiGroupsTitleByGroupIdResponse, GetApiChatsGroupChatsByGroupIdData, GetApiChatsGroupChatsByGroupIdResponse, PostApiChatsByGroupIdData, PostApiChatsByGroupIdResponse, PatchApiChatsByChatIdData, PatchApiChatsByChatIdResponse, DeleteApiChatsByChatIdData, DeleteApiChatsByChatIdResponse, GetApiRolesGroupByRoleIdData, GetApiRolesGroupByRoleIdResponse, DeleteApiRolesGroupByRoleIdData, DeleteApiRolesGroupByRoleIdResponse, GetApiRolesGroupPermissionsMeByGroupIdData, GetApiRolesGroupPermissionsMeByGroupIdResponse, PostApiRolesGroupByGroupIdData, PostApiRolesGroupByGroupIdResponse, PatchApiRolesGroupByGroupIdByRoleIdData, PatchApiRolesGroupByGroupIdByRoleIdResponse, GetApiMessagesChatByChatIdData, GetApiMessagesChatByChatIdResponse, GetApiResponse } from './types.gen';

export class AuthService {
    /**
     * Auth:Db Cookie.Login
     * @param data The data for the request.
     * @param data.formData
     * @returns unknown Successful Response
     * @returns void No Content
     * @throws ApiError
     */
    public static postApiAuthJwtLogin(data: PostApiAuthJwtLoginData): CancelablePromise<PostApiAuthJwtLoginResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/jwt/login',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                400: 'Bad Request',
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Auth:Db Cookie.Logout
     * @returns unknown Successful Response
     * @returns void No Content
     * @throws ApiError
     */
    public static postApiAuthJwtLogout(): CancelablePromise<PostApiAuthJwtLogoutResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/jwt/logout',
            errors: {
                401: 'Missing token or inactive user.'
            }
        });
    }
    
    /**
     * Register:Register
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserRead Successful Response
     * @throws ApiError
     */
    public static postApiAuthRegister(data: PostApiAuthRegisterData): CancelablePromise<PostApiAuthRegisterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/register',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset:Forgot Password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postApiAuthForgotPassword(data: PostApiAuthForgotPasswordData): CancelablePromise<PostApiAuthForgotPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/forgot-password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset:Reset Password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postApiAuthResetPassword(data: PostApiAuthResetPasswordData): CancelablePromise<PostApiAuthResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/reset-password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Verify:Request-Token
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postApiAuthRequestVerifyToken(data: PostApiAuthRequestVerifyTokenData): CancelablePromise<PostApiAuthRequestVerifyTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/request-verify-token',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Verify:Verify
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserRead Successful Response
     * @throws ApiError
     */
    public static postApiAuthVerify(data: PostApiAuthVerifyData): CancelablePromise<PostApiAuthVerifyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/verify',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Authenticated Route
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getApiAuthMe(): CancelablePromise<GetApiAuthMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/auth/me'
        });
    }
    
    /**
     * Authenticated Route Alterntive
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getApiAuthMeAlterntive(): CancelablePromise<GetApiAuthMeAlterntiveResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/auth/me_alterntive'
        });
    }
    
    /**
     * Get Access Token
     * Get and set in cookie access token using refresh token
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postApiAuthAccessToken(): CancelablePromise<PostApiAuthAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/access_token'
        });
    }
    
}

export class UsersService {
    /**
     * Users:Current User
     * @returns UserRead Successful Response
     * @throws ApiError
     */
    public static getApiUsersMe(): CancelablePromise<GetApiUsersMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/users/me',
            errors: {
                401: 'Missing token or inactive user.'
            }
        });
    }
    
    /**
     * Users:Patch Current User
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserRead Successful Response
     * @throws ApiError
     */
    public static patchApiUsersMe(data: PatchApiUsersMeData): CancelablePromise<PatchApiUsersMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Missing token or inactive user.',
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Users:User
     * @param data The data for the request.
     * @param data.id
     * @returns UserRead Successful Response
     * @throws ApiError
     */
    public static getApiUsersById(data: GetApiUsersByIdData): CancelablePromise<GetApiUsersByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/users/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Missing token or inactive user.',
                403: 'Not a superuser.',
                404: 'The user does not exist.',
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Users:Patch User
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns UserRead Successful Response
     * @throws ApiError
     */
    public static patchApiUsersById(data: PatchApiUsersByIdData): CancelablePromise<PatchApiUsersByIdResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/users/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Missing token or inactive user.',
                403: 'Not a superuser.',
                404: 'The user does not exist.',
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Users:Delete User
     * @param data The data for the request.
     * @param data.id
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteApiUsersById(data: DeleteApiUsersByIdData): CancelablePromise<DeleteApiUsersByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/users/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Missing token or inactive user.',
                403: 'Not a superuser.',
                404: 'The user does not exist.',
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Load Avatar
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getApiUsersAvatarMe(): CancelablePromise<GetApiUsersAvatarMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/users/avatar/me'
        });
    }
    
    /**
     * Upload Avatar
     * @param data The data for the request.
     * @param data.formData
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postApiUsersAvatarMe(data: PostApiUsersAvatarMeData): CancelablePromise<PostApiUsersAvatarMeResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/users/avatar/me',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class GroupService {
    /**
     * Get My Groups
     * @returns ReadGroupSchema Successful Response
     * @throws ApiError
     */
    public static getApiGroupsUserGroupsMe(): CancelablePromise<GetApiGroupsUserGroupsMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/groups/user_groups/me'
        });
    }
    
    /**
     * Load Avatar
     * @param data The data for the request.
     * @param data.groupId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getApiGroupsAvatarByGroupId(data: GetApiGroupsAvatarByGroupIdData): CancelablePromise<GetApiGroupsAvatarByGroupIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/groups/avatar/{group_id}',
            path: {
                group_id: data.groupId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Upload Avatar
     * @param data The data for the request.
     * @param data.groupId
     * @param data.formData
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postApiGroupsAvatarByGroupId(data: PostApiGroupsAvatarByGroupIdData): CancelablePromise<PostApiGroupsAvatarByGroupIdResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/groups/avatar/{group_id}',
            path: {
                group_id: data.groupId
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Load Panorama
     * @param data The data for the request.
     * @param data.groupId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getApiGroupsPanoramaByGroupId(data: GetApiGroupsPanoramaByGroupIdData): CancelablePromise<GetApiGroupsPanoramaByGroupIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/groups/panorama/{group_id}',
            path: {
                group_id: data.groupId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Upload Panorama
     * @param data The data for the request.
     * @param data.groupId
     * @param data.formData
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postApiGroupsPanoramaByGroupId(data: PostApiGroupsPanoramaByGroupIdData): CancelablePromise<PostApiGroupsPanoramaByGroupIdResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/groups/panorama/{group_id}',
            path: {
                group_id: data.groupId
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Invite Token
     * @param data The data for the request.
     * @param data.groupId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getApiGroupsInviteByGroupId(data: GetApiGroupsInviteByGroupIdData): CancelablePromise<GetApiGroupsInviteByGroupIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/groups/invite/{group_id}',
            path: {
                group_id: data.groupId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Join Group
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postApiGroupsInvite(data: PostApiGroupsInviteData): CancelablePromise<PostApiGroupsInviteResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/groups/invite',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Leave Group
     * @param data The data for the request.
     * @param data.groupId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postApiGroupsLeaveByGroupId(data: PostApiGroupsLeaveByGroupIdData): CancelablePromise<PostApiGroupsLeaveByGroupIdResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/groups/leave/{group_id}',
            path: {
                group_id: data.groupId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Group
     * @param data The data for the request.
     * @param data.groupId
     * @returns ReadGroupSchema Successful Response
     * @throws ApiError
     */
    public static getApiGroupsByGroupId(data: GetApiGroupsByGroupIdData): CancelablePromise<GetApiGroupsByGroupIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/groups/{group_id}',
            path: {
                group_id: data.groupId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Group
     * @param data The data for the request.
     * @param data.groupId
     * @param data.requestBody
     * @returns ReadGroupSchema Successful Response
     * @throws ApiError
     */
    public static patchApiGroupsByGroupId(data: PatchApiGroupsByGroupIdData): CancelablePromise<PatchApiGroupsByGroupIdResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/groups/{group_id}',
            path: {
                group_id: data.groupId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Group
     * @param data The data for the request.
     * @param data.groupId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteApiGroupsByGroupId(data: DeleteApiGroupsByGroupIdData): CancelablePromise<DeleteApiGroupsByGroupIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/groups/{group_id}',
            path: {
                group_id: data.groupId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Group
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ReadGroupSchema Successful Response
     * @throws ApiError
     */
    public static postApiGroups(data: PostApiGroupsData): CancelablePromise<PostApiGroupsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/groups/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Group Title
     * @param data The data for the request.
     * @param data.groupId
     * @param data.requestBody
     * @returns ReadGroupSchema Successful Response
     * @throws ApiError
     */
    public static patchApiGroupsTitleByGroupId(data: PatchApiGroupsTitleByGroupIdData): CancelablePromise<PatchApiGroupsTitleByGroupIdResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/groups/title/{group_id}',
            path: {
                group_id: data.groupId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class ChatService {
    /**
     * Get Group Chats
     * @param data The data for the request.
     * @param data.groupId
     * @returns ReadChatSchema Successful Response
     * @throws ApiError
     */
    public static getApiChatsGroupChatsByGroupId(data: GetApiChatsGroupChatsByGroupIdData): CancelablePromise<GetApiChatsGroupChatsByGroupIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/chats/group_chats/{group_id}',
            path: {
                group_id: data.groupId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Chat
     * @param data The data for the request.
     * @param data.groupId
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postApiChatsByGroupId(data: PostApiChatsByGroupIdData): CancelablePromise<PostApiChatsByGroupIdResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/chats/{group_id}',
            path: {
                group_id: data.groupId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Chat
     * @param data The data for the request.
     * @param data.chatId
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static patchApiChatsByChatId(data: PatchApiChatsByChatIdData): CancelablePromise<PatchApiChatsByChatIdResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/chats/{chat_id}',
            path: {
                chat_id: data.chatId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Chat
     * @param data The data for the request.
     * @param data.chatId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteApiChatsByChatId(data: DeleteApiChatsByChatIdData): CancelablePromise<DeleteApiChatsByChatIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/chats/{chat_id}',
            path: {
                chat_id: data.chatId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class RoleService {
    /**
     * Get Role
     * @param data The data for the request.
     * @param data.roleId
     * @returns ReadRoleSchema Successful Response
     * @throws ApiError
     */
    public static getApiRolesGroupByRoleId(data: GetApiRolesGroupByRoleIdData): CancelablePromise<GetApiRolesGroupByRoleIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/roles_group/{role_id}',
            path: {
                role_id: data.roleId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Role
     * @param data The data for the request.
     * @param data.roleId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteApiRolesGroupByRoleId(data: DeleteApiRolesGroupByRoleIdData): CancelablePromise<DeleteApiRolesGroupByRoleIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/roles_group/{role_id}',
            path: {
                role_id: data.roleId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get My Permissions In Group
     * @param data The data for the request.
     * @param data.groupId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getApiRolesGroupPermissionsMeByGroupId(data: GetApiRolesGroupPermissionsMeByGroupIdData): CancelablePromise<GetApiRolesGroupPermissionsMeByGroupIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/roles_group/permissions/me/{group_id}',
            path: {
                group_id: data.groupId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Role
     * @param data The data for the request.
     * @param data.groupId
     * @param data.requestBody
     * @returns ReadRoleSchema Successful Response
     * @throws ApiError
     */
    public static postApiRolesGroupByGroupId(data: PostApiRolesGroupByGroupIdData): CancelablePromise<PostApiRolesGroupByGroupIdResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/roles_group/{group_id}',
            path: {
                group_id: data.groupId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Role
     * @param data The data for the request.
     * @param data.roleId
     * @param data.groupId
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static patchApiRolesGroupByGroupIdByRoleId(data: PatchApiRolesGroupByGroupIdByRoleIdData): CancelablePromise<PatchApiRolesGroupByGroupIdByRoleIdResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/roles_group/{group_id}/{role_id}',
            path: {
                role_id: data.roleId,
                group_id: data.groupId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class MessagesService {
    /**
     * Get All Messages Chat
     * @param data The data for the request.
     * @param data.chatId
     * @returns ReadMessageSchema Successful Response
     * @throws ApiError
     */
    public static getApiMessagesChatByChatId(data: GetApiMessagesChatByChatIdData): CancelablePromise<GetApiMessagesChatByChatIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/messages/chat/{chat_id}',
            path: {
                chat_id: data.chatId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class DefaultService {
    /**
     * Ping
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getApi(): CancelablePromise<GetApiResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api'
        });
    }
    
}