// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GetApiUsersAvatarByGroupUuidData, GetApiUsersAvatarByGroupUuidResponse, PostApiUsersAvatarByGroupUuidData, PostApiUsersAvatarByGroupUuidResponse, GetApiUsersMeResponse, PatchApiUsersMeData, PatchApiUsersMeResponse, GetApiUsersByIdData, GetApiUsersByIdResponse, PatchApiUsersByIdData, PatchApiUsersByIdResponse, DeleteApiUsersByIdData, DeleteApiUsersByIdResponse, PostApiAuthJwtLoginData, PostApiAuthJwtLoginResponse, PostApiAuthJwtLogoutResponse, PostApiAuthRegisterData, PostApiAuthRegisterResponse, PostApiAuthForgotPasswordData, PostApiAuthForgotPasswordResponse, PostApiAuthResetPasswordData, PostApiAuthResetPasswordResponse, PostApiAuthRequestVerifyTokenData, PostApiAuthRequestVerifyTokenResponse, PostApiAuthVerifyData, PostApiAuthVerifyResponse, GetApiAuthAccessTokenResponse, GetApiAuthenticatedRouteResponse, GetApiResponse, GetApiGroupsAvatarByGroupUuidData, GetApiGroupsAvatarByGroupUuidResponse, PostApiGroupsAvatarByGroupUuidData, PostApiGroupsAvatarByGroupUuidResponse, GetApiGroupsPanoramaByGroupUuidData, GetApiGroupsPanoramaByGroupUuidResponse, PostApiGroupsPanoramaByGroupUuidData, PostApiGroupsPanoramaByGroupUuidResponse, GetApiGroupsInviteByGroupUuidData, GetApiGroupsInviteByGroupUuidResponse, PostApiGroupsInviteByGroupIdData, PostApiGroupsInviteByGroupIdResponse, GetApiGroupsUserGroupsMeResponse, GetApiGroupsUserGroupsByUserIdData, GetApiGroupsUserGroupsByUserIdResponse, GetApiGroupsByGroupUuidData, GetApiGroupsByGroupUuidResponse, PatchApiGroupsByGroupUuidData, PatchApiGroupsByGroupUuidResponse, DeleteApiGroupsByGroupUuidData, DeleteApiGroupsByGroupUuidResponse, PostApiGroupsData, PostApiGroupsResponse, GetApiPersonalChatsByPersonalChatUuidData, GetApiPersonalChatsByPersonalChatUuidResponse, PatchApiPersonalChatsByPersonalChatUuidData, PatchApiPersonalChatsByPersonalChatUuidResponse, DeleteApiPersonalChatsByPersonalChatUuidData, DeleteApiPersonalChatsByPersonalChatUuidResponse, PostApiPersonalChatsData, PostApiPersonalChatsResponse, GetApiChatsChatsMeResponse, GetApiChatsGroupChatsByGroupIdData, GetApiChatsGroupChatsByGroupIdResponse, GetApiChatsByChatUuidData, GetApiChatsByChatUuidResponse, PatchApiChatsByChatUuidData, PatchApiChatsByChatUuidResponse, DeleteApiChatsByChatUuidData, DeleteApiChatsByChatUuidResponse, PostApiChatsByGroupIdData, PostApiChatsByGroupIdResponse, GetApiRolesGroupByRoleGroupIdData, GetApiRolesGroupByRoleGroupIdResponse, PatchApiRolesGroupByRoleGroupIdData, PatchApiRolesGroupByRoleGroupIdResponse, DeleteApiRolesGroupByRoleGroupIdData, DeleteApiRolesGroupByRoleGroupIdResponse, PostApiRolesGroupData, PostApiRolesGroupResponse, GetApiMessagesChatByChatIdData, GetApiMessagesChatByChatIdResponse, GetApiMessagesByMessageIdData, GetApiMessagesByMessageIdResponse, PatchApiMessagesByMessageIdData, PatchApiMessagesByMessageIdResponse, DeleteApiMessagesByMessageIdData, DeleteApiMessagesByMessageIdResponse, PostApiMessagesData, PostApiMessagesResponse } from './types.gen';

export class UsersService {
    /**
     * Load Avatar
     * @param data The data for the request.
     * @param data.groupUuid
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getApiUsersAvatarByGroupUuid(data: GetApiUsersAvatarByGroupUuidData): CancelablePromise<GetApiUsersAvatarByGroupUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/users/avatar/{group_uuid}',
            path: {
                group_uuid: data.groupUuid
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Upload Avatar
     * @param data The data for the request.
     * @param data.groupUuid
     * @param data.formData
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postApiUsersAvatarByGroupUuid(data: PostApiUsersAvatarByGroupUuidData): CancelablePromise<PostApiUsersAvatarByGroupUuidResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/users/avatar/{group_uuid}',
            path: {
                group_uuid: data.groupUuid
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Users:Current User
     * @returns UserRead Successful Response
     * @throws ApiError
     */
    public static getApiUsersMe(): CancelablePromise<GetApiUsersMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/users/me',
            errors: {
                401: 'Missing token or inactive user.'
            }
        });
    }
    
    /**
     * Users:Patch Current User
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserRead Successful Response
     * @throws ApiError
     */
    public static patchApiUsersMe(data: PatchApiUsersMeData): CancelablePromise<PatchApiUsersMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Missing token or inactive user.',
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Users:User
     * @param data The data for the request.
     * @param data.id
     * @returns UserRead Successful Response
     * @throws ApiError
     */
    public static getApiUsersById(data: GetApiUsersByIdData): CancelablePromise<GetApiUsersByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/users/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Missing token or inactive user.',
                403: 'Not a superuser.',
                404: 'The user does not exist.',
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Users:Patch User
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns UserRead Successful Response
     * @throws ApiError
     */
    public static patchApiUsersById(data: PatchApiUsersByIdData): CancelablePromise<PatchApiUsersByIdResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/users/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Missing token or inactive user.',
                403: 'Not a superuser.',
                404: 'The user does not exist.',
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Users:Delete User
     * @param data The data for the request.
     * @param data.id
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteApiUsersById(data: DeleteApiUsersByIdData): CancelablePromise<DeleteApiUsersByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/users/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'Missing token or inactive user.',
                403: 'Not a superuser.',
                404: 'The user does not exist.',
                422: 'Validation Error'
            }
        });
    }
    
}

export class AuthService {
    /**
     * Auth:Db Cookie.Login
     * @param data The data for the request.
     * @param data.formData
     * @returns unknown Successful Response
     * @returns void No Content
     * @throws ApiError
     */
    public static postApiAuthJwtLogin(data: PostApiAuthJwtLoginData): CancelablePromise<PostApiAuthJwtLoginResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/jwt/login',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                400: 'Bad Request',
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Auth:Db Cookie.Logout
     * @returns unknown Successful Response
     * @returns void No Content
     * @throws ApiError
     */
    public static postApiAuthJwtLogout(): CancelablePromise<PostApiAuthJwtLogoutResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/jwt/logout',
            errors: {
                401: 'Missing token or inactive user.'
            }
        });
    }
    
    /**
     * Register:Register
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserRead Successful Response
     * @throws ApiError
     */
    public static postApiAuthRegister(data: PostApiAuthRegisterData): CancelablePromise<PostApiAuthRegisterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/register',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset:Forgot Password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postApiAuthForgotPassword(data: PostApiAuthForgotPasswordData): CancelablePromise<PostApiAuthForgotPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/forgot-password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset:Reset Password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postApiAuthResetPassword(data: PostApiAuthResetPasswordData): CancelablePromise<PostApiAuthResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/reset-password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Verify:Request-Token
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postApiAuthRequestVerifyToken(data: PostApiAuthRequestVerifyTokenData): CancelablePromise<PostApiAuthRequestVerifyTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/request-verify-token',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Verify:Verify
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserRead Successful Response
     * @throws ApiError
     */
    public static postApiAuthVerify(data: PostApiAuthVerifyData): CancelablePromise<PostApiAuthVerifyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/auth/verify',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Access Token
     * Get access token using refresh token
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getApiAuthAccessToken(): CancelablePromise<GetApiAuthAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/auth/access_token'
        });
    }
    
}

export class DefaultService {
    /**
     * Authenticated Route
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getApiAuthenticatedRoute(): CancelablePromise<GetApiAuthenticatedRouteResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/authenticated-route'
        });
    }
    
    /**
     * Ping
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getApi(): CancelablePromise<GetApiResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api'
        });
    }
    
}

export class GroupService {
    /**
     * Get Avatar
     * @param data The data for the request.
     * @param data.groupUuid
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getApiGroupsAvatarByGroupUuid(data: GetApiGroupsAvatarByGroupUuidData): CancelablePromise<GetApiGroupsAvatarByGroupUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/groups/avatar/{group_uuid}',
            path: {
                group_uuid: data.groupUuid
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Upload Avatar
     * @param data The data for the request.
     * @param data.groupUuid
     * @param data.formData
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postApiGroupsAvatarByGroupUuid(data: PostApiGroupsAvatarByGroupUuidData): CancelablePromise<PostApiGroupsAvatarByGroupUuidResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/groups/avatar/{group_uuid}',
            path: {
                group_uuid: data.groupUuid
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Load Panorama
     * @param data The data for the request.
     * @param data.groupUuid
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getApiGroupsPanoramaByGroupUuid(data: GetApiGroupsPanoramaByGroupUuidData): CancelablePromise<GetApiGroupsPanoramaByGroupUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/groups/panorama/{group_uuid}',
            path: {
                group_uuid: data.groupUuid
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Upload Panorama
     * @param data The data for the request.
     * @param data.groupUuid
     * @param data.formData
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postApiGroupsPanoramaByGroupUuid(data: PostApiGroupsPanoramaByGroupUuidData): CancelablePromise<PostApiGroupsPanoramaByGroupUuidResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/groups/panorama/{group_uuid}',
            path: {
                group_uuid: data.groupUuid
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Invite Token
     * @param data The data for the request.
     * @param data.groupUuid
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getApiGroupsInviteByGroupUuid(data: GetApiGroupsInviteByGroupUuidData): CancelablePromise<GetApiGroupsInviteByGroupUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/groups/invite/{group_uuid}',
            path: {
                group_uuid: data.groupUuid
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Join Group
     * @param data The data for the request.
     * @param data.groupId
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postApiGroupsInviteByGroupId(data: PostApiGroupsInviteByGroupIdData): CancelablePromise<PostApiGroupsInviteByGroupIdResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/groups/invite/{group_id}',
            path: {
                group_id: data.groupId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get My Groups
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getApiGroupsUserGroupsMe(): CancelablePromise<GetApiGroupsUserGroupsMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/groups/user_groups/me'
        });
    }
    
    /**
     * Get User Groups
     * @param data The data for the request.
     * @param data.userId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getApiGroupsUserGroupsByUserId(data: GetApiGroupsUserGroupsByUserIdData): CancelablePromise<GetApiGroupsUserGroupsByUserIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/groups/user_groups/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Group
     * @param data The data for the request.
     * @param data.groupUuid
     * @returns ReadGroupSchema Successful Response
     * @throws ApiError
     */
    public static getApiGroupsByGroupUuid(data: GetApiGroupsByGroupUuidData): CancelablePromise<GetApiGroupsByGroupUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/groups/{group_uuid}',
            path: {
                group_uuid: data.groupUuid
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Group
     * @param data The data for the request.
     * @param data.groupUuid
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static patchApiGroupsByGroupUuid(data: PatchApiGroupsByGroupUuidData): CancelablePromise<PatchApiGroupsByGroupUuidResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/groups/{group_uuid}',
            path: {
                group_uuid: data.groupUuid
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Group
     * @param data The data for the request.
     * @param data.groupUuid
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteApiGroupsByGroupUuid(data: DeleteApiGroupsByGroupUuidData): CancelablePromise<DeleteApiGroupsByGroupUuidResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/groups/{group_uuid}',
            path: {
                group_uuid: data.groupUuid
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Group
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postApiGroups(data: PostApiGroupsData): CancelablePromise<PostApiGroupsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/groups/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class PersonalChatService {
    /**
     * Get Personal Chat
     * @param data The data for the request.
     * @param data.personalChatUuid
     * @returns ReadPersonalChatSchema Successful Response
     * @throws ApiError
     */
    public static getApiPersonalChatsByPersonalChatUuid(data: GetApiPersonalChatsByPersonalChatUuidData): CancelablePromise<GetApiPersonalChatsByPersonalChatUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/personal_chats/{personal_chat_uuid}',
            path: {
                personal_chat_uuid: data.personalChatUuid
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Personal Chat
     * @param data The data for the request.
     * @param data.personalChatUuid
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static patchApiPersonalChatsByPersonalChatUuid(data: PatchApiPersonalChatsByPersonalChatUuidData): CancelablePromise<PatchApiPersonalChatsByPersonalChatUuidResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/personal_chats/{personal_chat_uuid}',
            path: {
                personal_chat_uuid: data.personalChatUuid
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Personal Chat
     * @param data The data for the request.
     * @param data.personalChatUuid
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteApiPersonalChatsByPersonalChatUuid(data: DeleteApiPersonalChatsByPersonalChatUuidData): CancelablePromise<DeleteApiPersonalChatsByPersonalChatUuidResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/personal_chats/{personal_chat_uuid}',
            path: {
                personal_chat_uuid: data.personalChatUuid
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Personal Chat
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postApiPersonalChats(data: PostApiPersonalChatsData): CancelablePromise<PostApiPersonalChatsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/personal_chats/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class ChatService {
    /**
     * Get My Chats
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getApiChatsChatsMe(): CancelablePromise<GetApiChatsChatsMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/chats/chats/me'
        });
    }
    
    /**
     * Get Group Chats
     * @param data The data for the request.
     * @param data.groupId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getApiChatsGroupChatsByGroupId(data: GetApiChatsGroupChatsByGroupIdData): CancelablePromise<GetApiChatsGroupChatsByGroupIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/chats/group_chats/{group_id}',
            path: {
                group_id: data.groupId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Chat
     * @param data The data for the request.
     * @param data.chatUuid
     * @returns ReadChatSchema Successful Response
     * @throws ApiError
     */
    public static getApiChatsByChatUuid(data: GetApiChatsByChatUuidData): CancelablePromise<GetApiChatsByChatUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/chats/{chat_uuid}',
            path: {
                chat_uuid: data.chatUuid
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Chat
     * @param data The data for the request.
     * @param data.chatUuid
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static patchApiChatsByChatUuid(data: PatchApiChatsByChatUuidData): CancelablePromise<PatchApiChatsByChatUuidResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/chats/{chat_uuid}',
            path: {
                chat_uuid: data.chatUuid
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Chat
     * @param data The data for the request.
     * @param data.chatUuid
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteApiChatsByChatUuid(data: DeleteApiChatsByChatUuidData): CancelablePromise<DeleteApiChatsByChatUuidResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/chats/{chat_uuid}',
            path: {
                chat_uuid: data.chatUuid
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Chat
     * @param data The data for the request.
     * @param data.groupId
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postApiChatsByGroupId(data: PostApiChatsByGroupIdData): CancelablePromise<PostApiChatsByGroupIdResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/chats/{group_id}',
            path: {
                group_id: data.groupId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class RoleGroupService {
    /**
     * Get Role Group
     * @param data The data for the request.
     * @param data.roleGroupId
     * @returns ReadRoleGroupSchema Successful Response
     * @throws ApiError
     */
    public static getApiRolesGroupByRoleGroupId(data: GetApiRolesGroupByRoleGroupIdData): CancelablePromise<GetApiRolesGroupByRoleGroupIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/roles_group/{role_group_id}',
            path: {
                role_group_id: data.roleGroupId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Role Group
     * @param data The data for the request.
     * @param data.roleGroupId
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static patchApiRolesGroupByRoleGroupId(data: PatchApiRolesGroupByRoleGroupIdData): CancelablePromise<PatchApiRolesGroupByRoleGroupIdResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/roles_group/{role_group_id}',
            path: {
                role_group_id: data.roleGroupId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Role Group
     * @param data The data for the request.
     * @param data.roleGroupId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteApiRolesGroupByRoleGroupId(data: DeleteApiRolesGroupByRoleGroupIdData): CancelablePromise<DeleteApiRolesGroupByRoleGroupIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/roles_group/{role_group_id}',
            path: {
                role_group_id: data.roleGroupId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Role Group
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postApiRolesGroup(data: PostApiRolesGroupData): CancelablePromise<PostApiRolesGroupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/roles_group/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class MessagesService {
    /**
     * Get All Messages Chat
     * @param data The data for the request.
     * @param data.chatId
     * @returns ReadMessageSchema Successful Response
     * @throws ApiError
     */
    public static getApiMessagesChatByChatId(data: GetApiMessagesChatByChatIdData): CancelablePromise<GetApiMessagesChatByChatIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/messages/chat/{chat_id}',
            path: {
                chat_id: data.chatId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Message By Id
     * @param data The data for the request.
     * @param data.messageId
     * @returns ReadMessageSchema Successful Response
     * @throws ApiError
     */
    public static getApiMessagesByMessageId(data: GetApiMessagesByMessageIdData): CancelablePromise<GetApiMessagesByMessageIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/messages/{message_id}',
            path: {
                message_id: data.messageId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Message
     * not work
     * @param data The data for the request.
     * @param data.messageId
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static patchApiMessagesByMessageId(data: PatchApiMessagesByMessageIdData): CancelablePromise<PatchApiMessagesByMessageIdResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/messages/{message_id}',
            path: {
                message_id: data.messageId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Message
     * @param data The data for the request.
     * @param data.messageId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteApiMessagesByMessageId(data: DeleteApiMessagesByMessageIdData): CancelablePromise<DeleteApiMessagesByMessageIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/messages/{message_id}',
            path: {
                message_id: data.messageId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Message
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static postApiMessages(data: PostApiMessagesData): CancelablePromise<PostApiMessagesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/messages/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}