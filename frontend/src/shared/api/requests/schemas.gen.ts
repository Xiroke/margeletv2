// This file is auto-generated by @hey-api/openapi-ts

export const $BaseChatSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        group_id: {
            type: 'string',
            format: 'uuid',
            title: 'Group Id'
        }
    },
    type: 'object',
    required: ['id', 'title', 'created_at', 'group_id'],
    title: 'BaseChatSchema'
} as const;

export const $BaseRoleSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        group_id: {
            type: 'string',
            format: 'uuid',
            title: 'Group Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        permissions: {
            items: {
                '$ref': '#/components/schemas/RolePermissionsEnum'
            },
            type: 'array',
            title: 'Permissions'
        }
    },
    type: 'object',
    required: ['id', 'title', 'group_id', 'created_at', 'permissions'],
    title: 'BaseRoleSchema'
} as const;

export const $Body_auth_db_cookie_login_api_auth_jwt_login_post = {
    properties: {
        grant_type: {
            anyOf: [
                {
                    type: 'string',
                    pattern: '^password$'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Type'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        scope: {
            type: 'string',
            title: 'Scope',
            default: ''
        },
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Secret'
        }
    },
    type: 'object',
    required: ['username', 'password'],
    title: 'Body_auth_db_cookie_login_api_auth_jwt_login_post'
} as const;

export const $Body_reset_forgot_password_api_auth_forgot_password_post = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        }
    },
    type: 'object',
    required: ['email'],
    title: 'Body_reset_forgot_password_api_auth_forgot_password_post'
} as const;

export const $Body_reset_reset_password_api_auth_reset_password_post = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        },
        password: {
            type: 'string',
            title: 'Password'
        }
    },
    type: 'object',
    required: ['token', 'password'],
    title: 'Body_reset_reset_password_api_auth_reset_password_post'
} as const;

export const $Body_upload_avatar_api_groups_avatar__group_id__post = {
    properties: {
        image: {
            type: 'string',
            format: 'binary',
            title: 'Image'
        }
    },
    type: 'object',
    required: ['image'],
    title: 'Body_upload_avatar_api_groups_avatar__group_id__post'
} as const;

export const $Body_upload_avatar_api_users_avatar_me_post = {
    properties: {
        image: {
            type: 'string',
            format: 'binary',
            title: 'Image'
        }
    },
    type: 'object',
    required: ['image'],
    title: 'Body_upload_avatar_api_users_avatar_me_post'
} as const;

export const $Body_upload_panorama_api_groups_panorama__group_id__post = {
    properties: {
        image: {
            type: 'string',
            format: 'binary',
            title: 'Image'
        }
    },
    type: 'object',
    required: ['image'],
    title: 'Body_upload_panorama_api_groups_panorama__group_id__post'
} as const;

export const $Body_verify_request_token_api_auth_request_verify_token_post = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        }
    },
    type: 'object',
    required: ['email'],
    title: 'Body_verify_request_token_api_auth_request_verify_token_post'
} as const;

export const $Body_verify_verify_api_auth_verify_post = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        }
    },
    type: 'object',
    required: ['token'],
    title: 'Body_verify_verify_api_auth_verify_post'
} as const;

export const $CreateChatSchema = {
    properties: {
        title: {
            type: 'string',
            title: 'Title'
        },
        group_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Group Id'
        }
    },
    type: 'object',
    required: ['title'],
    title: 'CreateChatSchema'
} as const;

export const $CreateGroupSchema = {
    properties: {
        title: {
            type: 'string',
            title: 'Title'
        },
        description: {
            type: 'string',
            title: 'Description'
        }
    },
    type: 'object',
    required: ['title', 'description'],
    title: 'CreateGroupSchema'
} as const;

export const $CreateRoleSchema = {
    properties: {
        title: {
            type: 'string',
            title: 'Title'
        },
        group_id: {
            type: 'string',
            format: 'uuid',
            title: 'Group Id'
        },
        permissions: {
            items: {
                '$ref': '#/components/schemas/RolePermissionsEnum'
            },
            type: 'array',
            title: 'Permissions',
            default: []
        }
    },
    type: 'object',
    required: ['title', 'group_id'],
    title: 'CreateRoleSchema'
} as const;

export const $ErrorModel = {
    properties: {
        detail: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                }
            ],
            title: 'Detail'
        }
    },
    type: 'object',
    required: ['detail'],
    title: 'ErrorModel'
} as const;

export const $HTTPValidationError = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const $ReadChatSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        group_id: {
            type: 'string',
            format: 'uuid',
            title: 'Group Id'
        }
    },
    type: 'object',
    required: ['id', 'title', 'created_at', 'group_id'],
    title: 'ReadChatSchema'
} as const;

export const $ReadGroupSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        title: {
            type: 'string',
            maxLength: 20,
            title: 'Title'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        avatar_path: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Avatar Path'
        },
        panorama_path: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Panorama Path'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        chats: {
            items: {
                '$ref': '#/components/schemas/BaseChatSchema'
            },
            type: 'array',
            title: 'Chats',
            default: []
        },
        roles: {
            items: {
                '$ref': '#/components/schemas/BaseRoleSchema'
            },
            type: 'array',
            title: 'Roles',
            default: []
        }
    },
    type: 'object',
    required: ['id', 'title', 'description', 'created_at'],
    title: 'ReadGroupSchema'
} as const;

export const $ReadMessageSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        id_in_chat: {
            type: 'integer',
            title: 'Id In Chat'
        },
        message: {
            type: 'string',
            maxLength: 2000,
            title: 'Message',
            description: 'Message must be less than 2000 characters'
        },
        user_id: {
            type: 'string',
            format: 'uuid',
            title: 'User Id'
        },
        to_chat_id: {
            type: 'string',
            format: 'uuid',
            title: 'To Chat Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        author: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Author'
        }
    },
    type: 'object',
    required: ['id', 'id_in_chat', 'message', 'user_id', 'to_chat_id', 'created_at'],
    title: 'ReadMessageSchema'
} as const;

export const $ReadRoleSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        group_id: {
            type: 'string',
            format: 'uuid',
            title: 'Group Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        permissions: {
            items: {
                '$ref': '#/components/schemas/RolePermissionsEnum'
            },
            type: 'array',
            title: 'Permissions'
        }
    },
    type: 'object',
    required: ['id', 'title', 'group_id', 'created_at', 'permissions'],
    title: 'ReadRoleSchema'
} as const;

export const $RolePermissionsEnum = {
    type: 'string',
    enum: ['can_all', 'can_edit_group_settings', 'can_edit_roles', 'can_control_chats', 'can_send_message', 'can_invite'],
    title: 'RolePermissionsEnum'
} as const;

export const $UpdateChatSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        title: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title'
        }
    },
    type: 'object',
    required: ['id'],
    title: 'UpdateChatSchema'
} as const;

export const $UpdateGroupSchema = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        title: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        avatar_path: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Avatar Path'
        },
        panorama_path: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Panorama Path'
        }
    },
    type: 'object',
    title: 'UpdateGroupSchema'
} as const;

export const $UpdateRoleSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        title: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title'
        },
        permissions: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/RolePermissionsEnum'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Permissions'
        }
    },
    type: 'object',
    required: ['id'],
    title: 'UpdateRoleSchema'
} as const;

export const $UserCreate = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        account_name: {
            type: 'string',
            title: 'Account Name'
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        is_active: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Superuser',
            default: false
        },
        is_verified: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Verified',
            default: false
        }
    },
    type: 'object',
    required: ['name', 'account_name', 'email', 'password'],
    title: 'UserCreate'
} as const;

export const $UserRead = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        account_name: {
            type: 'string',
            title: 'Account Name'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        is_verified: {
            type: 'boolean',
            title: 'Is Verified',
            default: false
        }
    },
    type: 'object',
    required: ['id', 'name', 'account_name', 'created_at', 'email'],
    title: 'UserRead'
} as const;

export const $UserUpdate = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        avatar_path: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Avatar Path'
        },
        password: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Password'
        },
        email: {
            anyOf: [
                {
                    type: 'string',
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        is_active: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Active'
        },
        is_superuser: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Superuser'
        },
        is_verified: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Verified'
        }
    },
    type: 'object',
    required: ['id'],
    title: 'UserUpdate'
} as const;

export const $ValidationError = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;