// This file is auto-generated by @hey-api/openapi-ts

import { type Options, loginApiAuthLoginPost, registerApiAuthRegisterPost, resendVerificationApiAuthResendVerificationPost, verifyApiAuthVerifyPost, getAccessTokenApiAuthTokenPost, getMeApiAuthMeGet, loadAvatarApiUsersAvatarMeGet, uploadAvatarApiUsersAvatarMePost, getMyGroupsApiPersonalGroupsMeGet, createApiPersonalGroupsOtherUserIdPost, deleteApiPersonalGroupsIdDelete, getApiPersonalGroupsIdGet, updateApiPersonalGroupsIdPatch, createApiSimpleGroupsPost, getMySimpleGroupsApiSimpleGroupsMeGet, deleteApiSimpleGroupsIdDelete, getApiSimpleGroupsIdGet, updateApiSimpleGroupsIdPatch, createMessageApiMessagesPost, getLatestMessagesByGroupApiMessagesGroupIdGet, pingApiHealthcheckGet } from '../sdk.gen';
import { type UseMutationOptions, type DefaultError, queryOptions } from '@tanstack/react-query';
import type { LoginApiAuthLoginPostData, LoginApiAuthLoginPostError, RegisterApiAuthRegisterPostData, RegisterApiAuthRegisterPostError, ResendVerificationApiAuthResendVerificationPostData, ResendVerificationApiAuthResendVerificationPostError, VerifyApiAuthVerifyPostData, VerifyApiAuthVerifyPostError, GetAccessTokenApiAuthTokenPostData, GetAccessTokenApiAuthTokenPostResponse, GetMeApiAuthMeGetData, LoadAvatarApiUsersAvatarMeGetData, UploadAvatarApiUsersAvatarMePostData, UploadAvatarApiUsersAvatarMePostError, GetMyGroupsApiPersonalGroupsMeGetData, CreateApiPersonalGroupsOtherUserIdPostData, CreateApiPersonalGroupsOtherUserIdPostError, DeleteApiPersonalGroupsIdDeleteData, DeleteApiPersonalGroupsIdDeleteError, GetApiPersonalGroupsIdGetData, UpdateApiPersonalGroupsIdPatchData, UpdateApiPersonalGroupsIdPatchError, CreateApiSimpleGroupsPostData, CreateApiSimpleGroupsPostError, GetMySimpleGroupsApiSimpleGroupsMeGetData, DeleteApiSimpleGroupsIdDeleteData, DeleteApiSimpleGroupsIdDeleteError, GetApiSimpleGroupsIdGetData, UpdateApiSimpleGroupsIdPatchData, UpdateApiSimpleGroupsIdPatchError, CreateMessageApiMessagesPostData, CreateMessageApiMessagesPostError, GetLatestMessagesByGroupApiMessagesGroupIdGetData, PingApiHealthcheckGetData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

/**
 * Login
 */
export const loginApiAuthLoginPostMutation = (options?: Partial<Options<LoginApiAuthLoginPostData>>): UseMutationOptions<unknown, LoginApiAuthLoginPostError, Options<LoginApiAuthLoginPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, LoginApiAuthLoginPostError, Options<LoginApiAuthLoginPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await loginApiAuthLoginPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Register
 * Create user and send verification token
 */
export const registerApiAuthRegisterPostMutation = (options?: Partial<Options<RegisterApiAuthRegisterPostData>>): UseMutationOptions<unknown, RegisterApiAuthRegisterPostError, Options<RegisterApiAuthRegisterPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, RegisterApiAuthRegisterPostError, Options<RegisterApiAuthRegisterPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await registerApiAuthRegisterPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Resend Verification
 * Resends the verification token
 */
export const resendVerificationApiAuthResendVerificationPostMutation = (options?: Partial<Options<ResendVerificationApiAuthResendVerificationPostData>>): UseMutationOptions<unknown, ResendVerificationApiAuthResendVerificationPostError, Options<ResendVerificationApiAuthResendVerificationPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, ResendVerificationApiAuthResendVerificationPostError, Options<ResendVerificationApiAuthResendVerificationPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await resendVerificationApiAuthResendVerificationPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Verify
 * Verifies the user
 */
export const verifyApiAuthVerifyPostMutation = (options?: Partial<Options<VerifyApiAuthVerifyPostData>>): UseMutationOptions<unknown, VerifyApiAuthVerifyPostError, Options<VerifyApiAuthVerifyPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, VerifyApiAuthVerifyPostError, Options<VerifyApiAuthVerifyPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await verifyApiAuthVerifyPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Get Access Token
 */
export const getAccessTokenApiAuthTokenPostMutation = (options?: Partial<Options<GetAccessTokenApiAuthTokenPostData>>): UseMutationOptions<GetAccessTokenApiAuthTokenPostResponse, DefaultError, Options<GetAccessTokenApiAuthTokenPostData>> => {
    const mutationOptions: UseMutationOptions<GetAccessTokenApiAuthTokenPostResponse, DefaultError, Options<GetAccessTokenApiAuthTokenPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await getAccessTokenApiAuthTokenPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getMeApiAuthMeGetQueryKey = (options?: Options<GetMeApiAuthMeGetData>) => createQueryKey('getMeApiAuthMeGet', options);

/**
 * Get Me
 * Get current user information
 */
export const getMeApiAuthMeGetOptions = (options?: Options<GetMeApiAuthMeGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMeApiAuthMeGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMeApiAuthMeGetQueryKey(options)
    });
};

export const loadAvatarApiUsersAvatarMeGetQueryKey = (options?: Options<LoadAvatarApiUsersAvatarMeGetData>) => createQueryKey('loadAvatarApiUsersAvatarMeGet', options);

/**
 * Load Avatar
 */
export const loadAvatarApiUsersAvatarMeGetOptions = (options?: Options<LoadAvatarApiUsersAvatarMeGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loadAvatarApiUsersAvatarMeGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loadAvatarApiUsersAvatarMeGetQueryKey(options)
    });
};

/**
 * Upload Avatar
 */
export const uploadAvatarApiUsersAvatarMePostMutation = (options?: Partial<Options<UploadAvatarApiUsersAvatarMePostData>>): UseMutationOptions<unknown, UploadAvatarApiUsersAvatarMePostError, Options<UploadAvatarApiUsersAvatarMePostData>> => {
    const mutationOptions: UseMutationOptions<unknown, UploadAvatarApiUsersAvatarMePostError, Options<UploadAvatarApiUsersAvatarMePostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await uploadAvatarApiUsersAvatarMePost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getMyGroupsApiPersonalGroupsMeGetQueryKey = (options?: Options<GetMyGroupsApiPersonalGroupsMeGetData>) => createQueryKey('getMyGroupsApiPersonalGroupsMeGet', options);

/**
 * Get My Groups
 */
export const getMyGroupsApiPersonalGroupsMeGetOptions = (options?: Options<GetMyGroupsApiPersonalGroupsMeGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMyGroupsApiPersonalGroupsMeGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMyGroupsApiPersonalGroupsMeGetQueryKey(options)
    });
};

/**
 * Create
 * Creates a personal group between the current user and another
 */
export const createApiPersonalGroupsOtherUserIdPostMutation = (options?: Partial<Options<CreateApiPersonalGroupsOtherUserIdPostData>>): UseMutationOptions<unknown, CreateApiPersonalGroupsOtherUserIdPostError, Options<CreateApiPersonalGroupsOtherUserIdPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, CreateApiPersonalGroupsOtherUserIdPostError, Options<CreateApiPersonalGroupsOtherUserIdPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createApiPersonalGroupsOtherUserIdPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete
 */
export const deleteApiPersonalGroupsIdDeleteMutation = (options?: Partial<Options<DeleteApiPersonalGroupsIdDeleteData>>): UseMutationOptions<unknown, DeleteApiPersonalGroupsIdDeleteError, Options<DeleteApiPersonalGroupsIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteApiPersonalGroupsIdDeleteError, Options<DeleteApiPersonalGroupsIdDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteApiPersonalGroupsIdDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiPersonalGroupsIdGetQueryKey = (options: Options<GetApiPersonalGroupsIdGetData>) => createQueryKey('getApiPersonalGroupsIdGet', options);

/**
 * Get
 */
export const getApiPersonalGroupsIdGetOptions = (options: Options<GetApiPersonalGroupsIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiPersonalGroupsIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiPersonalGroupsIdGetQueryKey(options)
    });
};

/**
 * Update
 */
export const updateApiPersonalGroupsIdPatchMutation = (options?: Partial<Options<UpdateApiPersonalGroupsIdPatchData>>): UseMutationOptions<unknown, UpdateApiPersonalGroupsIdPatchError, Options<UpdateApiPersonalGroupsIdPatchData>> => {
    const mutationOptions: UseMutationOptions<unknown, UpdateApiPersonalGroupsIdPatchError, Options<UpdateApiPersonalGroupsIdPatchData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateApiPersonalGroupsIdPatch({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Create
 */
export const createApiSimpleGroupsPostMutation = (options?: Partial<Options<CreateApiSimpleGroupsPostData>>): UseMutationOptions<unknown, CreateApiSimpleGroupsPostError, Options<CreateApiSimpleGroupsPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, CreateApiSimpleGroupsPostError, Options<CreateApiSimpleGroupsPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createApiSimpleGroupsPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getMySimpleGroupsApiSimpleGroupsMeGetQueryKey = (options?: Options<GetMySimpleGroupsApiSimpleGroupsMeGetData>) => createQueryKey('getMySimpleGroupsApiSimpleGroupsMeGet', options);

/**
 * Get My Simple Groups
 */
export const getMySimpleGroupsApiSimpleGroupsMeGetOptions = (options?: Options<GetMySimpleGroupsApiSimpleGroupsMeGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMySimpleGroupsApiSimpleGroupsMeGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMySimpleGroupsApiSimpleGroupsMeGetQueryKey(options)
    });
};

/**
 * Delete
 */
export const deleteApiSimpleGroupsIdDeleteMutation = (options?: Partial<Options<DeleteApiSimpleGroupsIdDeleteData>>): UseMutationOptions<unknown, DeleteApiSimpleGroupsIdDeleteError, Options<DeleteApiSimpleGroupsIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, DeleteApiSimpleGroupsIdDeleteError, Options<DeleteApiSimpleGroupsIdDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteApiSimpleGroupsIdDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiSimpleGroupsIdGetQueryKey = (options: Options<GetApiSimpleGroupsIdGetData>) => createQueryKey('getApiSimpleGroupsIdGet', options);

/**
 * Get
 */
export const getApiSimpleGroupsIdGetOptions = (options: Options<GetApiSimpleGroupsIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiSimpleGroupsIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiSimpleGroupsIdGetQueryKey(options)
    });
};

/**
 * Update
 */
export const updateApiSimpleGroupsIdPatchMutation = (options?: Partial<Options<UpdateApiSimpleGroupsIdPatchData>>): UseMutationOptions<unknown, UpdateApiSimpleGroupsIdPatchError, Options<UpdateApiSimpleGroupsIdPatchData>> => {
    const mutationOptions: UseMutationOptions<unknown, UpdateApiSimpleGroupsIdPatchError, Options<UpdateApiSimpleGroupsIdPatchData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateApiSimpleGroupsIdPatch({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Create Message
 */
export const createMessageApiMessagesPostMutation = (options?: Partial<Options<CreateMessageApiMessagesPostData>>): UseMutationOptions<unknown, CreateMessageApiMessagesPostError, Options<CreateMessageApiMessagesPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, CreateMessageApiMessagesPostError, Options<CreateMessageApiMessagesPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createMessageApiMessagesPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getLatestMessagesByGroupApiMessagesGroupIdGetQueryKey = (options: Options<GetLatestMessagesByGroupApiMessagesGroupIdGetData>) => createQueryKey('getLatestMessagesByGroupApiMessagesGroupIdGet', options);

/**
 * Get Latest Messages By Group
 */
export const getLatestMessagesByGroupApiMessagesGroupIdGetOptions = (options: Options<GetLatestMessagesByGroupApiMessagesGroupIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getLatestMessagesByGroupApiMessagesGroupIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getLatestMessagesByGroupApiMessagesGroupIdGetQueryKey(options)
    });
};

export const pingApiHealthcheckGetQueryKey = (options?: Options<PingApiHealthcheckGetData>) => createQueryKey('pingApiHealthcheckGet', options);

/**
 * Ping
 */
export const pingApiHealthcheckGetOptions = (options?: Options<PingApiHealthcheckGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await pingApiHealthcheckGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: pingApiHealthcheckGetQueryKey(options)
    });
};