// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { LoginApiAuthLoginPostData, LoginApiAuthLoginPostResponses, LoginApiAuthLoginPostErrors, RegisterApiAuthRegisterPostData, RegisterApiAuthRegisterPostResponses, RegisterApiAuthRegisterPostErrors, ResendVerificationApiAuthResendVerificationPostData, ResendVerificationApiAuthResendVerificationPostResponses, ResendVerificationApiAuthResendVerificationPostErrors, VerifyApiAuthVerifyPostData, VerifyApiAuthVerifyPostResponses, VerifyApiAuthVerifyPostErrors, GetAccessTokenApiAuthTokenPostData, GetAccessTokenApiAuthTokenPostResponses, GetMeApiAuthMeGetData, GetMeApiAuthMeGetResponses, LoadAvatarApiUsersAvatarMeGetData, LoadAvatarApiUsersAvatarMeGetResponses, UploadAvatarApiUsersAvatarMePostData, UploadAvatarApiUsersAvatarMePostResponses, UploadAvatarApiUsersAvatarMePostErrors, GetMyGroupsApiPersonalGroupsMeGetData, GetMyGroupsApiPersonalGroupsMeGetResponses, CreateApiPersonalGroupsOtherUserIdPostData, CreateApiPersonalGroupsOtherUserIdPostResponses, CreateApiPersonalGroupsOtherUserIdPostErrors, DeleteApiPersonalGroupsIdDeleteData, DeleteApiPersonalGroupsIdDeleteResponses, DeleteApiPersonalGroupsIdDeleteErrors, GetApiPersonalGroupsIdGetData, GetApiPersonalGroupsIdGetResponses, GetApiPersonalGroupsIdGetErrors, UpdateApiPersonalGroupsIdPatchData, UpdateApiPersonalGroupsIdPatchResponses, UpdateApiPersonalGroupsIdPatchErrors, CreateApiSimpleGroupsPostData, CreateApiSimpleGroupsPostResponses, CreateApiSimpleGroupsPostErrors, GetMySimpleGroupsApiSimpleGroupsMeGetData, GetMySimpleGroupsApiSimpleGroupsMeGetResponses, DeleteApiSimpleGroupsIdDeleteData, DeleteApiSimpleGroupsIdDeleteResponses, DeleteApiSimpleGroupsIdDeleteErrors, GetApiSimpleGroupsIdGetData, GetApiSimpleGroupsIdGetResponses, GetApiSimpleGroupsIdGetErrors, UpdateApiSimpleGroupsIdPatchData, UpdateApiSimpleGroupsIdPatchResponses, UpdateApiSimpleGroupsIdPatchErrors, DeleteRoleApiRolesRoleIdDeleteData, DeleteRoleApiRolesRoleIdDeleteResponses, DeleteRoleApiRolesRoleIdDeleteErrors, GetRoleApiRolesRoleIdGetData, GetRoleApiRolesRoleIdGetResponses, GetRoleApiRolesRoleIdGetErrors, UpdateRoleApiRolesRoleIdPatchData, UpdateRoleApiRolesRoleIdPatchResponses, UpdateRoleApiRolesRoleIdPatchErrors, GetMyPermissionsInGroupApiRolesPermissionsMeGroupIdGetData, GetMyPermissionsInGroupApiRolesPermissionsMeGroupIdGetResponses, GetMyPermissionsInGroupApiRolesPermissionsMeGroupIdGetErrors, CreateRoleApiRolesPostData, CreateRoleApiRolesPostResponses, CreateRoleApiRolesPostErrors, PingApiHealthcheckGetData, PingApiHealthcheckGetResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Login
 */
export const loginApiAuthLoginPost = <ThrowOnError extends boolean = false>(options: Options<LoginApiAuthLoginPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginApiAuthLoginPostResponses, LoginApiAuthLoginPostErrors, ThrowOnError>({
        url: '/api/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Register
 * Create user and send verification token
 */
export const registerApiAuthRegisterPost = <ThrowOnError extends boolean = false>(options: Options<RegisterApiAuthRegisterPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterApiAuthRegisterPostResponses, RegisterApiAuthRegisterPostErrors, ThrowOnError>({
        url: '/api/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Resend Verification
 * Resends the verification token
 */
export const resendVerificationApiAuthResendVerificationPost = <ThrowOnError extends boolean = false>(options: Options<ResendVerificationApiAuthResendVerificationPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResendVerificationApiAuthResendVerificationPostResponses, ResendVerificationApiAuthResendVerificationPostErrors, ThrowOnError>({
        url: '/api/auth/resend_verification',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Verify
 * Verifies the user
 */
export const verifyApiAuthVerifyPost = <ThrowOnError extends boolean = false>(options: Options<VerifyApiAuthVerifyPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VerifyApiAuthVerifyPostResponses, VerifyApiAuthVerifyPostErrors, ThrowOnError>({
        url: '/api/auth/verify',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Access Token
 */
export const getAccessTokenApiAuthTokenPost = <ThrowOnError extends boolean = false>(options?: Options<GetAccessTokenApiAuthTokenPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<GetAccessTokenApiAuthTokenPostResponses, unknown, ThrowOnError>({
        url: '/api/auth/token',
        ...options
    });
};

/**
 * Get Me
 * Get current user information
 */
export const getMeApiAuthMeGet = <ThrowOnError extends boolean = false>(options?: Options<GetMeApiAuthMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMeApiAuthMeGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/me',
        ...options
    });
};

/**
 * Load Avatar
 */
export const loadAvatarApiUsersAvatarMeGet = <ThrowOnError extends boolean = false>(options?: Options<LoadAvatarApiUsersAvatarMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<LoadAvatarApiUsersAvatarMeGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/avatar/me',
        ...options
    });
};

/**
 * Upload Avatar
 */
export const uploadAvatarApiUsersAvatarMePost = <ThrowOnError extends boolean = false>(options: Options<UploadAvatarApiUsersAvatarMePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadAvatarApiUsersAvatarMePostResponses, UploadAvatarApiUsersAvatarMePostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/avatar/me',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Get My Groups
 */
export const getMyGroupsApiPersonalGroupsMeGet = <ThrowOnError extends boolean = false>(options?: Options<GetMyGroupsApiPersonalGroupsMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMyGroupsApiPersonalGroupsMeGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/personal_groups/me',
        ...options
    });
};

/**
 * Create
 * Creates a personal group between the current user and another
 */
export const createApiPersonalGroupsOtherUserIdPost = <ThrowOnError extends boolean = false>(options: Options<CreateApiPersonalGroupsOtherUserIdPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateApiPersonalGroupsOtherUserIdPostResponses, CreateApiPersonalGroupsOtherUserIdPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/personal_groups/{other_user_id}',
        ...options
    });
};

/**
 * Delete
 */
export const deleteApiPersonalGroupsIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteApiPersonalGroupsIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiPersonalGroupsIdDeleteResponses, DeleteApiPersonalGroupsIdDeleteErrors, ThrowOnError>({
        url: '/api/personal_groups/{id}',
        ...options
    });
};

/**
 * Get
 */
export const getApiPersonalGroupsIdGet = <ThrowOnError extends boolean = false>(options: Options<GetApiPersonalGroupsIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiPersonalGroupsIdGetResponses, GetApiPersonalGroupsIdGetErrors, ThrowOnError>({
        url: '/api/personal_groups/{id}',
        ...options
    });
};

/**
 * Update
 */
export const updateApiPersonalGroupsIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateApiPersonalGroupsIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateApiPersonalGroupsIdPatchResponses, UpdateApiPersonalGroupsIdPatchErrors, ThrowOnError>({
        url: '/api/personal_groups/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create
 */
export const createApiSimpleGroupsPost = <ThrowOnError extends boolean = false>(options: Options<CreateApiSimpleGroupsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateApiSimpleGroupsPostResponses, CreateApiSimpleGroupsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/simple_groups/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get My Simple Groups
 */
export const getMySimpleGroupsApiSimpleGroupsMeGet = <ThrowOnError extends boolean = false>(options?: Options<GetMySimpleGroupsApiSimpleGroupsMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMySimpleGroupsApiSimpleGroupsMeGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/simple_groups/me',
        ...options
    });
};

/**
 * Delete
 */
export const deleteApiSimpleGroupsIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteApiSimpleGroupsIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiSimpleGroupsIdDeleteResponses, DeleteApiSimpleGroupsIdDeleteErrors, ThrowOnError>({
        url: '/api/simple_groups/{id}',
        ...options
    });
};

/**
 * Get
 */
export const getApiSimpleGroupsIdGet = <ThrowOnError extends boolean = false>(options: Options<GetApiSimpleGroupsIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiSimpleGroupsIdGetResponses, GetApiSimpleGroupsIdGetErrors, ThrowOnError>({
        url: '/api/simple_groups/{id}',
        ...options
    });
};

/**
 * Update
 */
export const updateApiSimpleGroupsIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateApiSimpleGroupsIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateApiSimpleGroupsIdPatchResponses, UpdateApiSimpleGroupsIdPatchErrors, ThrowOnError>({
        url: '/api/simple_groups/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Role
 */
export const deleteRoleApiRolesRoleIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteRoleApiRolesRoleIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteRoleApiRolesRoleIdDeleteResponses, DeleteRoleApiRolesRoleIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/roles/{role_id}',
        ...options
    });
};

/**
 * Get Role
 */
export const getRoleApiRolesRoleIdGet = <ThrowOnError extends boolean = false>(options: Options<GetRoleApiRolesRoleIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRoleApiRolesRoleIdGetResponses, GetRoleApiRolesRoleIdGetErrors, ThrowOnError>({
        url: '/api/roles/{role_id}',
        ...options
    });
};

/**
 * Update Role
 */
export const updateRoleApiRolesRoleIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateRoleApiRolesRoleIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateRoleApiRolesRoleIdPatchResponses, UpdateRoleApiRolesRoleIdPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/roles/{role_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get My Permissions In Group
 */
export const getMyPermissionsInGroupApiRolesPermissionsMeGroupIdGet = <ThrowOnError extends boolean = false>(options: Options<GetMyPermissionsInGroupApiRolesPermissionsMeGroupIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMyPermissionsInGroupApiRolesPermissionsMeGroupIdGetResponses, GetMyPermissionsInGroupApiRolesPermissionsMeGroupIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/roles/permissions/me/{group_id}',
        ...options
    });
};

/**
 * Create Role
 */
export const createRoleApiRolesPost = <ThrowOnError extends boolean = false>(options: Options<CreateRoleApiRolesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateRoleApiRolesPostResponses, CreateRoleApiRolesPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/roles/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Ping
 */
export const pingApiHealthcheckGet = <ThrowOnError extends boolean = false>(options?: Options<PingApiHealthcheckGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PingApiHealthcheckGetResponses, unknown, ThrowOnError>({
        url: '/api/healthcheck',
        ...options
    });
};